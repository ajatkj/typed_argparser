from typing import Callable, List, Optional

from typing_extensions import Literal

from .utils import transform_heading, transform_metavar

_OPTIONS_GROUP_HEADING = "options"
_POSITIONAL_GROUP_HEADING = "positional"
_MISCELLANEOUS_GROUP_HEADING = "miscellaneous"
_COMMANDS_GROUP_HEADING = "commands"
_DESCRIPTION_HEADING = "description"
_COMMAND_METAVAR = "command"
_OPTION_METAVAR = "option"
_USAGE_PREFIX = "usage: "


class ArgumentConfig:
    """
    Configuration options for argument parsing.

    Attributes:
        - `show_default_in_help` (bool): Whether to show default values in help messages. Defaults to True.
        - `show_none_default` (bool): Whether to show default values even if they are None. Defaults to False.
        - `show_type_in_help` (bool): Whether to show argument types in help messages. Defaults to True.
        - `metavar_transform` (Callable[[str], str]): Function for transforming metavar strings. Defaults to transform_metavar.
        - `heading_transform` (Callable[[str], str]): Function for transforming heading strings. Defaults to transform_heading.
        - `add_help` (Optional[bool]): Whether to include help options in the parser. Defaults to True.
        - `groups_sort_order` (Optional[List[str]]): Order in which argument groups should be sorted. "*" is a wildcard which
                signifies all groups. Defaults to ["positional", "optional", "*", "commands", "miscellaneous"].
        - `compact_usage` (bool): Whether to use compact usage messages. Defaults to False. You can use `command_metavar` and
                `option_metavar` to change the metavar for optional arguments and commands.
        - `default_options_group_heading` (str): Default heading for options groups. Defaults to "options".

            Note: heading_transform will be applied to this parameter.
        - `default_positional_group_heading` (str): Default heading for positional groups. Defaults to "positional".

            Note: heading_transform will be applied to this parameter
        - `default_commands_group_heading` (str): Default heading for commands groups. Defaults to "commands".

            Note: heading_transform will be applied to this parameter
        - `default_miscellaneous_group_heading` (str): Default heading for miscellaneous groups. Defaults to "miscellaneous".

            Note: heading_transform will be applied to this parameter
        - `default_description_heading` (Optional[str]): Default heading for descriptions. Defaults to "description". Set this to `None`
            to hide the description heading.

            Note: heading_transform will be applied to this parameter
        - `default_usage_prefix` (str): Default prefix for usage messages. Defaults to "usage: ".

            Note: this value will be used as is without any transformation
        - `command_metavar` (str): Metavar string for commands. Defaults to "commmand".

            Note: `command_metavar` is used for both `compact_usage` and default usage generated by ArgumentClass.
                Metavar transformation `transform_metavar` is only applied for default usage. For `compact_usage`, the value is used as is.
        - `option_metavar` (str): Metavar string for options. Defaults to "option".

            Note: no transformation is applied to this value.
        - `extra_arguments` (Literal["allow", "ignore", "error"]): Behavior for handling extra arguments. Defaults to "error".
                When set to `allow` a new property `extra_fields` is added to the instance of ArgumentClass.

        - `allow_multiple_commands` (bool): Whether to allow multiple commands. Defaults to False.
    """

    __slots__ = (
        "show_default_in_help",
        "show_none_default",
        "show_type_in_help",
        "metavar_transform",
        "heading_transform",
        "add_help",
        "groups_sort_order",
        "compact_usage",
        "default_options_group_heading",
        "default_positional_group_heading",
        "default_commands_group_heading",
        "default_miscellaneous_group_heading",
        "default_description_heading",
        "default_usage_prefix",
        "command_metavar",
        "option_metavar",
        "extra_arguments",
        "allow_multiple_commands",
    )

    def __init__(
        self,
        show_default_in_help: bool = True,
        show_none_default: bool = False,
        show_type_in_help: bool = True,
        metavar_transform: Callable[[str], str] = transform_metavar,
        heading_transform: Callable[[str], str] = transform_heading,
        add_help: bool = True,
        groups_sort_order: Optional[List[str]] = None,
        compact_usage: bool = False,
        default_options_group_heading: str = _OPTIONS_GROUP_HEADING,
        default_positional_group_heading: str = _POSITIONAL_GROUP_HEADING,
        default_commands_group_heading: str = _COMMANDS_GROUP_HEADING,
        default_miscellaneous_group_heading: str = _MISCELLANEOUS_GROUP_HEADING,
        default_description_heading: str = _DESCRIPTION_HEADING,
        default_usage_prefix: str = _USAGE_PREFIX,
        command_metavar: str = _COMMAND_METAVAR,
        option_metavar: str = _OPTION_METAVAR,
        extra_arguments: Literal["allow", "ignore", "error"] = "error",
        allow_multiple_commands: bool = False,
    ):
        self.show_default_in_help = show_default_in_help
        self.show_none_default = show_none_default
        self.show_type_in_help = show_type_in_help
        self.metavar_transform = metavar_transform
        self.heading_transform = heading_transform
        self.add_help = add_help
        self.groups_sort_order = groups_sort_order
        self.compact_usage = compact_usage
        self.default_options_group_heading = default_options_group_heading
        self.default_commands_group_heading = default_commands_group_heading
        self.default_miscellaneous_group_heading = default_miscellaneous_group_heading
        self.default_positional_group_heading = default_positional_group_heading
        self.default_description_heading = default_description_heading
        self.default_usage_prefix = default_usage_prefix
        self.extra_arguments = extra_arguments
        self.allow_multiple_commands = allow_multiple_commands
        if self.groups_sort_order is None:
            self.groups_sort_order = [
                self.default_positional_group_heading,
                self.default_options_group_heading,
                "*",
                self.default_commands_group_heading,
                self.default_miscellaneous_group_heading,
            ]
        self.command_metavar = command_metavar
        self.option_metavar = option_metavar
